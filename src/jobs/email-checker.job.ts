import { imapService } from '../services/imap.service';
import { env } from '../config/env';

class EmailCheckerJob {
  private intervalId: NodeJS.Timeout | null = null;
  private isRunning = false;

  async start() {
    console.log(`üîÑ D√©marrage du polling IMAP (intervalle: ${env.IMAP_CHECK_INTERVAL_MS}ms)`);

    // Premier check imm√©diat
    await this.checkEmails();

    // Puis check p√©riodique
    this.intervalId = setInterval(async () => {
      await this.checkEmails();
    }, env.IMAP_CHECK_INTERVAL_MS);
  }

  stop() {
    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.intervalId = null;
      console.log('‚èπÔ∏è  Polling IMAP arr√™t√©');
    }
  }

  private async checkEmails() {
    if (this.isRunning) {
      console.log('‚è≠Ô∏è  Check pr√©c√©dent en cours, skip...');
      return;
    }

    this.isRunning = true;
    const startTime = Date.now();

    try {
      console.log('üîç V√©rification des nouveaux emails...');

      await imapService.connect();
      await imapService.fetchUnreadEmails();
      imapService.disconnect();

      const duration = Date.now() - startTime;
      console.log(`‚úÖ Check termin√© en ${duration}ms`);
    } catch (error) {
      console.error('‚ùå Erreur lors du check emails:', error);
      imapService.disconnect();
    } finally {
      this.isRunning = false;
    }
  }

  async checkNow() {
    console.log('üîç Check manuel d√©clench√©');
    await this.checkEmails();
  }
}

export const emailCheckerJob = new EmailCheckerJob();
